Hash Functions are used all across computer science.


A hash function is a function which generates a value of fixed for each input
that it gets.

For example, md5 is a type of hash function (there are many, such as SHA1, 
and SHA-256).

A sample md5 hash generator can be found at https://www.md5hashgenerator.com/.

A hash function will take a value, eg "hello", and generate a hash, eg. 5d41402abc4b2a76b9719d911017c592

This process is called hashing.

Hash functions are one way, so we would never be able to get "hello" from 5d41402abc4b2a76b9719d911017c592.

And, the same value will always hash to the same result. So no matter how many times
we hash "hello", it will always be 5d41402abc4b2a76b9719d911017c592 with md5.
This is what we call "idempotent" (functions givien the same input always return the 
same output). The main benefit of using this in a data structure is very fast data access.
The hash value generated will never change, so we will always know the position in memory.
All we need to do to find the value is to use the name of the key,
after the "." operator.

Technically, a hash function will take a value, convert it to a hash, and then convert it
to a memory address based on the hash. Unlike arrays, in which we have ordered indexes,
and ordered elements in memory, all we have to do to find a value from a hashtable in 
memory is to give it a key. Based on the key's hash, and the hash's memory address, we will 
know exactly where it is. This makes lookup extremely fast.

Notice that we need to call the hash function every time we add a key-value pair,
and every time we look up a value. For this reason, hash functions should be fast.
Under the hood, languages implement an optimum hashing function that's very fast.

Hash functions like SHA-256 take a very long time to generate a hash. It uses an 
overly complex function to generate a hash. The goal is to purposely be slow, and
is used in places like cryptography. In this case, we want it to take longer to 
protect against attacks where attackers would need generate many hashes. Such 
attacks could be scripts which try a large number of passwords. Since 
websites need to generate a hash for the password, generating many would take forever!

In summary, keys are hashed to hashes, which is then converted to a memory address
where we store the data.

We usually leave the hashing up to the language or library we're using, and assume a 
complexity of O(1).